/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.duan1.View.QLHD;

import com.mycompany.duan1.Entity.KhachHang;
import com.mycompany.duan1.Entity.ThongTinChiTiet;
import com.mycompany.duan1.Service.Impl.KhachHangServiceImpl;
import com.mycompany.duan1.Service.KhachHangService;
import java.awt.BorderLayout;
import java.text.Collator;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Locale;
import java.util.Optional;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Admin
 */
public class AddKHToHD extends javax.swing.JFrame {

    DefaultTableModel dtm;
    private final KhachHangService khachhangservice = new KhachHangServiceImpl();
    createHDJPanel createHDJPanel;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    public AddKHToHD(createHDJPanel currentcreatehDJPanel) {
        this.createHDJPanel = currentcreatehDJPanel;
        initComponents();
        setLocationRelativeTo(null);

        dtm = (DefaultTableModel) tblDanhSachKH.getModel();
        loadDataToTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtFilter = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblDanhSachKH = new javax.swing.JTable();
        btnThem = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setText("Search/Filter:");

        txtFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFilterActionPerformed(evt);
            }
        });
        txtFilter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFilterKeyReleased(evt);
            }
        });

        tblDanhSachKH.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        tblDanhSachKH.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID ", "Mã KH", "Họ tên", "SĐT", "Giới tính", "Email", "Ngày tạo", "Cấp bậc", "Mức giảm"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDanhSachKH.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDanhSachKHMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblDanhSachKH);

        btnThem.setText("+");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(26, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThem))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFilterActionPerformed

    }//GEN-LAST:event_txtFilterActionPerformed

    private void txtFilterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFilterKeyReleased
        String query = txtFilter.getText().toLowerCase();
        filter(query);
    }//GEN-LAST:event_txtFilterKeyReleased

    private void tblDanhSachKHMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDanhSachKHMouseClicked
        int index = tblDanhSachKH.getSelectedRow();
        Long idKH = (Long) tblDanhSachKH.getValueAt(index, 0);
        String tenKH = (String) tblDanhSachKH.getValueAt(index, 2);
        String tencapbac = (String) tblDanhSachKH.getValueAt(index, 7);
        Double mucgiam = (Double) tblDanhSachKH.getValueAt(index, 8);

        Optional<KhachHang> kh = khachhangservice.findByID(idKH);
        if (kh.isPresent()) {
            List<ThongTinChiTiet> list = kh.get().getCtkh();
            for (ThongTinChiTiet item : list) {
                if (item.getIs_primary() == 1) {
                    String sdt = item.getSDT();
                    String dc = item.getDiaChi();
                    String tp = item.getThanhPho();

                    createHDJPanel.txtSDT.setText(sdt);
                    createHDJPanel.txtDC.setText(dc);
                    createHDJPanel.txtThanhPho.setText(tp);

                }
            }

        }
        createHDJPanel.jpnThongTinKH.removeAll();
        createHDJPanel.jpnThongTinKH.setLayout(new BorderLayout());
        createHDJPanel.jpnThongTinKH.add(createHDJPanel.jpnChiTietKH);
        createHDJPanel.jpnThongTinKH.validate();
        createHDJPanel.jpnThongTinKH.repaint();
        createHDJPanel.txtKH.setText(tenKH);
        createHDJPanel.txtMaKH.setText(String.valueOf(idKH));
        createHDJPanel.txtCapBac.setText(tencapbac);
        createHDJPanel.txtMucGiamKH.setText(String.valueOf(mucgiam));

        createHDJPanel.logicTinhTongTienSauKhiThemKhachHang();

        this.dispose();
    }//GEN-LAST:event_tblDanhSachKHMouseClicked

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        new ThemMoiKHJframe(this).setVisible(true);
    }//GEN-LAST:event_btnThemActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnThem;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDanhSachKH;
    private javax.swing.JTextField txtFilter;
    // End of variables declaration//GEN-END:variables

    public void loadDataToTable() {
        List<KhachHang> danhsachKH = khachhangservice.findAll();
        dtm.setRowCount(0);
        for (KhachHang kh : danhsachKH) {
            dtm.addRow(new Object[]{kh.getId(), kh.getMa(), kh.getTen(), kh.getSDT(), kh.getGioiTinh(), kh.getEmail(), sdf.format(kh.getNgayTao()), kh.getCapbac().getTen(), kh.getCapbac().getMucGiam()});
        }
    }

//    TableRowSorter cung cấp các phương thức và thuộc tính để thực hiện các hoạt động sắp xếp và lọc dữ liệu, bao gồm:
//
//setSortable(int column, boolean sortable): Đặt tính khả năng sắp xếp của cột được chỉ định.
//setRowFilter(RowFilter<? super M, ? super I> filter): Đặt bộ lọc hàng để áp dụng cho bảng.
//toggleSortOrder(int column): Chuyển đổi trạng thái sắp xếp của cột được chỉ định (tăng dần hoặc giảm dần).
//setSortKeys(List<? extends SortKey> sortKeys): Đặt danh sách các khóa sắp xếp để xác định thứ tự sắp xếp của các cột.
//getFilteredRowCount(): Trả về số lượng hàng đang được hiển thị sau khi áp dụng bộ lọc.
//TableRowSorter có thể được gắn kết với một JTable bằng cách sử dụng 
//    phương thức setRowSorter(TableRowSorter<? extends TableModel> sorter) của JTable. 
//    Khi TableRowSorter được gắn kết với JTable, người dùng có thể sắp xếp và lọc 
//    dữ liệu bằng cách nhấp vào tiêu đề của các cột hoặc sử dụng các công cụ sắp xếp và lọc được cung cấp.
    private void filter(String query) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(dtm);
        tblDanhSachKH.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + escapeSpecialCharacters(query), getColumnIndices()));
    }

    private String escapeSpecialCharacters(String text) {
        // Escape special regex characters
        return text.replaceAll("([\\\\^$*+?.\\(\\)\\|\\[\\]\\{\\}])", "\\\\$1");
    }

    private int[] getColumnIndices() {
        // Return an array of column indices to apply the filter
        // You can customize this method based on your table's structure
        int numColumns = dtm.getColumnCount();
        int[] indices = new int[numColumns];
        for (int i = 0; i < numColumns; i++) {
            indices[i] = i;
        }
        return indices;
    }

    private Collator getCollator() {
        // Create a Collator with Locale specific rules
        // This example uses Vietnamese Locale
        Locale locale = new Locale("vi", "VN");
        return Collator.getInstance(locale);
    }
}
